library(aomisc)
install.packages("remotes")
remotes::install_github("OnofriAndreaPG/aomisc")
library(aomisc)
model <- drm(urban.tree.data$Age ~ urban.tree.data$DBH, fct = LL.4(), data = brassica)
model <- drm(Age ~ DBH, fct = LL.4(), data = urban.tree.data)
model <- drm(Age ~ DBH, fct = LL.4(), data = urban.tree.data)
model <- drm(urban.tree.data$Age ~ urban.tree.data$DBH, fct = LL.4())
summary(model)
plot(model)
model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = LL.4())
summary(model)
plot(model)
model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
summary(model)
plot(model)
urban.tree.data$DBH
urban.tree.data$DBH..cm.
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age>0,]
urban.tree.data<-urban.tree.data[urban.tree.data$Age<2 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan"),
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age>0,]
urban.tree.data<-urban.tree.data[urban.tree.data$Age<20 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan"),
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
plot(model)
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
lines(model)
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan"),
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
# model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
model <- lm(urban.tree.data$DBH~urban.tree.data$Age)
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan") &
urban.tree.data$DBH>50,
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age>0,]
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan") &
urban.tree.data$DBH<50,
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
# model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
model <- lm(urban.tree.data$DBH~urban.tree.data$Age)
summary(model)
plot(model)
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan") &
urban.tree.data$DBH<50,
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
# model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
model <- lm(urban.tree.data$DBH~urban.tree.data$Age)
summary(model)
?ln
log(1)
?log
log(log(1), 10)
exp(log(1))
years<-1:10
years
# make biomass function
biomass<-function(DBH){
return(exp(-2.0705 + 2.4410*log(DBH)))
}
dbh.yr<-function(year){
return(2.97+1.02*year)
}
years<-1:10
dbh.df<-data.frame(Year=years, DBH=dbh.yr(years), Biomass=biomass(dbh.yr(years)))
dbh.df
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(dplyr)
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age>0,]
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan") &
urban.tree.data$DBH<50,
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
# model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
model <- lm(urban.tree.data$DBH~urban.tree.data$Age)
summary(model)
# Chunk 3
# allometric equation from https://academic.oup.com/forestry/article/87/1/129/602137?login=false
# ln(Biomass) = -2.0705 + 2.4410*ln(DBH)
# Biomass = exp(-2.0705 + 2.4410*ln(DBH))
# from Hardwood Fagaceae, deciduous
# make biomass function
biomass<-function(DBH){
return(exp(-2.0705 + 2.4410*log(DBH)))
}
# make dbh by year function
dbh.yr<-function(year){
return(2.97+1.02*year)
}
# vector of years
years<-1:10
# make dataframe of years and dbh
dbh.df<-data.frame(Year=years, DBH=dbh.yr(years), Biomass.kg=biomass(dbh.yr(years)))
dbh.df
library(dplyr)
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age>0,]
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan") &
urban.tree.data$DBH<50,
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
# model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
model <- lm(urban.tree.data$DBH~urban.tree.data$Age)
summary(model)
library(dplyr)
urban.tree.data<-read.csv("~/Downloads/RDS-2016-0005/Data/TS3_Raw_tree_data.csv")
urban.tree.data<-urban.tree.data[urban.tree.data$Age>0,]
urban.tree.data<-urban.tree.data[urban.tree.data$Age<10 &
urban.tree.data$City=="Charleston, SC" &
urban.tree.data$CommonName %in% c("Willow oak",
"Water oak",
"Live oak",
"Laurel oak",
"Pecan") &
urban.tree.data$DBH<50,
]
plot(urban.tree.data$Age,urban.tree.data$DBH,
xlab="Age",
ylab="DBH",
main="DBH vs Age")
# model <- drm(urban.tree.data$DBH~urban.tree.data$Age, fct = L.3())
model <- lm(urban.tree.data$DBH~urban.tree.data$Age)
summary(model)
# allometric equation from https://academic.oup.com/forestry/article/87/1/129/602137?login=false
# ln(Biomass) = -2.0705 + 2.4410*ln(DBH)
# Biomass = exp(-2.0705 + 2.4410*ln(DBH))
# from Hardwood Fagaceae, deciduous
# make biomass function
biomass<-function(DBH){
return(exp(-2.0705 + 2.4410*log(DBH)))
}
# make dbh by year function
dbh.yr<-function(year){
return(2.97+1.02*year)
}
# vector of years
years<-1:10
# make dataframe of years and dbh
dbh.df<-data.frame(Year=years, DBH=dbh.yr(years), Biomass.kg=biomass(dbh.yr(years)))
dbh.df
?split
pdf <- pdf_text("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf")
# read pdf
library(pdftools)
install.packages("pdftools")
# read pdf
library(pdftools)
pdf <- pdf_text("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf")
ref.pdf <- pdf_text("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf")
state.pdf <- pdf_text("Downloads/381_AL_CPS_Silvopasture_2012.pdf")
install.packages("diffr")
library(diffr)
# compare pdfs
diffr::diff_pdf(ref.pdf, state.pdf)
# compare pdfs
diff_pdf(ref.pdf, state.pdf)
# compare pdfs
diffr(ref.pdf, state.pdf)
ref.pdf
# compare pdfs
diffr("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf", "Downloads/381_AL_CPS_Silvopasture_2012.pdf")
# compare pdfs
ref.pdf <- c("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf")
state.pdf <- c("Downloads/381_AL_CPS_Silvopasture_2012.pdf")
diffr(ref.pdf, state.pdf)
warnings()
ref.pdf <- pdf_text("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf")
state.pdf <- pdf_text("Downloads/381_AL_CPS_Silvopasture_2012.pdf")
ref.pdf <- unlist(pdf_text("Downloads/Alley_Cropping_311_Overview_Oct_2017.pdf"))
state.pdf <- unlist(pdf_text("Downloads/381_AL_CPS_Silvopasture_2012.pdf"))
install.packages("gdif")
library(stringr)
str_diff(ref.pdf, state.pdf)
# allometric equation from https://academic.oup.com/forestry/article/87/1/129/602137?login=false
# ln(Biomass) = -2.0705 + 2.4410*ln(DBH)
# Biomass = exp(-2.0705 + 2.4410*ln(DBH))
# from Hardwood Fagaceae, deciduous
# biomass value: https://research.fs.usda.gov/nrs/news/highlights/how-much-carbon-tree-biomass
# 47.4% carbon by weight
# make allometric equation / biomass from DBH function
biomass<-function(DBH){
return(exp(-2.0705 + 2.4410*log(DBH)))
}
# make dbh by year function
dbh.yr<-function(year){
return(2.97+1.02*year)
}
# vector of years
years<-1:50
# make dataframe of years and dbh
dbh.df<-data.frame(Year=years, DBH.cm=dbh.yr(years),
Biomass.kg=biomass(dbh.yr(years)),
CO2.eq=biomass(dbh.yr(years))*.474*3.67)
dbh.df
# allometric equation from https://academic.oup.com/forestry/article/87/1/129/602137?login=false
# ln(Biomass) = -2.0705 + 2.4410*ln(DBH)
# Biomass = exp(-2.0705 + 2.4410*ln(DBH))
# from Hardwood Fagaceae, deciduous
# biomass value: https://research.fs.usda.gov/nrs/news/highlights/how-much-carbon-tree-biomass
# 47.4% carbon by weight
# make allometric equation / biomass from DBH function
biomass<-function(DBH){
return(exp(-2.0705 + 2.4410*log(DBH)))
}
# make dbh by year function
dbh.yr<-function(year){
return(2.97+1.02*year)
}
# vector of years
years<-1:50
# make dataframe of years and dbh
dbh.df<-data.frame(Year=years, DBH.cm=dbh.yr(years),
Biomass.kg=biomass(dbh.yr(years)),
CO2.eq=biomass(dbh.yr(years))*.474*3.67*.001)
dbh.df
tibble(dbh.df)
dbh.df
dbh.df<-data.frame(Year=years, DBH.cm=dbh.yr(years),
Biomass.kg=biomass(dbh.yr(years)),
CumulativeCO2.eq=biomass(dbh.yr(years))*.474*3.67*.001)
dbh.df
getwd()
setwd("/Users/dietrich/Documents/GitHub/SoilMapping/")
setwd("/Users/dietrich/Documents/GitHub/SoilMapping")
setwd("/Users/dietrich/Documents/GitHub/substack_demos/SoilMapping/")
library(raster)
library(stars)
library(sf)
library(soilDB)
library(leaflet)
# pull raster layer from SOLUS100
# depth sclices in this case is only 0-5cm
# soil factor is pH
layers<-raster(soildDB::fetchSOLUS(depth_slices = c("0"),
variables = c("ph1to1h2o")))
library(soilDB)
library(raster)
library(stars)
library(sf)
library(soilDB)
library(leaflet)
# pull raster layer from SOLUS100
# depth sclices in this case is only 0-5cm
# soil factor is pH
layers<-raster(soildDB::fetchSOLUS(depth_slices = c("0"),
variables = c("ph1to1h2o")))
# pull raster layer from SOLUS100
# depth sclices in this case is only 0-5cm
# soil factor is pH
layers<-raster(soilDB::fetchSOLUS(depth_slices = c("0"),
variables = c("ph1to1h2o")))
# Read in geometry file
mpfile<-list.files(pattern="\\.json$") # find geometry file
mp=sf::read_sf(mpfile)
# for a single state view, in this case WV:
# I use one state for quicker computation when testing
mp<-mp[mp$STATE=="54"
,]
# crop the raster file to borders
mp = st_transform(mp, st_crs(layers)) # datum transformation
sf_use_s2(FALSE) # turn off s2 (curve projection)
## crop and mask
r2 <- crop(layers, extent(mp))
r3 <- mask(r2, mp)
# define color palette
pal2<-colorNumeric("RdYlBu", getValues(r3), na.color = "transparent")
# plot condition with colors
# a common error is maxBytes is too small for number of pixels plotting. If this is the case, the error will tell you how many bytes you need, and you can set the max above that value. The default is way too low for most regional plotting.
leaflet() %>% addTiles() %>%
addRasterImage(r3, pal2, opacity = 0.6, maxBytes = 10000000) %>% addLegend(pal = pal2, values = getValues(r3), position = "topleft")
# set t1 for workflow time benchmark
t1 <- Sys.time()
# set t1 for workflow time benchmark
t1 <- Sys.time()
# load libraries
library(raster)
library(stars)
library(sf)
library(soilDB)
library(leaflet)
# pull raster layer from SOLUS100
# depth sclices in this case is only 0-5cm
# soil factor is pH
layers<-raster(soilDB::fetchSOLUS(depth_slices = c("0"),
variables = c("ph1to1h2o")))
# Read in geometry file
mpfile<-list.files(pattern="\\.json$") # find geometry file
mp=sf::read_sf(mpfile)
# select counties for map geometry:
# subset mp to only contiguous states
# 54 = WV; PA = 42; VA = 51; MD = 24; NY = 36; NC = 37; VT = 50; KY = 21; TN = 47
mp<-mp[mp$STATE=="54"|
mp$STATE=="42" |
mp$STATE=="51" |
mp$STATE=="24" |
mp$STATE=="36" |
mp$STATE=="37" |
mp$STATE=="50" |
mp$STATE=="21" |
mp$STATE=="47"
,] # start with state codes
# for a single state view, in this case WV:
# I use one state for quicker computation when testing
mp<-mp[mp$STATE=="54"
,]
# crop the raster file to borders
mp = st_transform(mp, st_crs(layers)) # datum transformation
sf_use_s2(FALSE) # turn off s2 (curve projection)
## crop and mask
r2 <- crop(layers, extent(mp))
r3 <- mask(r2, mp)
# define color palette
pal2<-colorNumeric("RdYlBu", getValues(r3), na.color = "transparent")
# plot condition with colors
# a common error is maxBytes is too small for number of pixels plotting. If this is the case, the error will tell you how many bytes you need, and you can set the max above that value. The default is way too low for most regional plotting.
leaflet() %>% addTiles() %>%
addRasterImage(r3, pal2, opacity = 0.6, maxBytes = 10000000) %>% addLegend(pal = pal2, values = getValues(r3), position = "topleft")
# check time to run workflow:
Sys.time()-t1
habitat.v1 = r3 > 6.9
habitat.v1[habitat.v1 == 0] <- NaN
# define color palette for overlay
pal <- colorRampPalette(c("purple"))
pal<-colorNumeric(pal = pal, domain = c(1), na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(habitat.v1, colors = pal, opacity = 0.6, maxBytes = 10000000)
t2 = Syst.time
t2 = Sys.time()
# define a raster analysis of single layers:
# this is defined for overlay, will need to
# Habitat01<-function(pH.layer){
pH.condition = pH.layer > 6.9
t2 = Sys.time()
# define a raster analysis of single layers:
# this is defined for overlay, will need to
# Habitat01<-function(pH.layer){
pH.condition = pH.layer > 6.9
# start time benchmark for part 2
t2 = Sys.time()
pH.condition = pH.layer > 6.9
return(pH.condition)
# start time benchmark for part 2
t2 = Sys.time
# define a raster analysis of single layers:
# this is defined for overlay, will need to
habitat.v1 = r3 > 6.9
habitat.v1[habitat.v1 == 0] <- NaN
# define color palette for overlay
pal <- colorRampPalette(c("purple"))
pal<-colorNumeric(pal = pal, domain = c(1), na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(habitat.v1, colors = pal, opacity = 0.6, maxBytes = 10000000)
# check time
Sys.time() - t2
Sys.time() - t2
# start time benchmark for part 2
t2 = Sys.time
Sys.time() - t2
# start time benchmark for part 2
t2 = Sys.time()
# check time
Sys.time() - t2 # 1.036 minutes on a 2018 mac mini; 3.2 ghz 6 cores
t2 = Sys.time()
# define a raster analysis of single layers:
# this is defined for overlay, will need to
habitat.v1 = r3 > 6.9
habitat.v1[habitat.v1 == 0] <- NaN
# define color palette for overlay
pal <- colorRampPalette(c("purple"))
pal<-colorNumeric(pal = pal, domain = c(1), na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(habitat.v1, colors = pal, opacity = 0.6, maxBytes = 10000000)
# check time
Sys.time() - t2
# define slope raster
elevation <- get_elev_raster(mp, z = 11) # set z to lower
library(elevatr)
# define slope raster
elevation <- get_elev_raster(mp, z = 11) # set z to lower
slope <- terrain(elevation, opt = "slope", unit = "degrees")
slope_res <- raster::resample(slope, r3, method = "bilinear")
slope_res<-crop(slope_res, extent(mp))
slope_res<-mask(slope_res, mp)
Habitat02<-function(pH.layer, slope.layer){
# define thresholds
pH.condition = pH.layer > 6.9
slope.condition = slope.layer < 6
# combine conditions. Values are 1 if all criteria are met, and 0 if not
out <- pH.condition * slope.condition
# set zeros to NAN; this will make them transparent when plotting
out[out == 0] <- NaN
# define output of function
return(out)
}
habitat.v2 <-overlay(r3,
slope_res,
fun=Habitat02)
leaflet() %>% addTiles() %>%
addRasterImage(habitat.v2,
colors = pal, # use purple as defined previously
opacity = 0.6,
maxBytes = 10000000)
t3 = Sys.time()
# define slope raster
elevation <- get_elev_raster(mp, z = 11) # set z to lower
t3 = Sys.time()
# define slope raster
elevation <- get_elev_raster(mp, z = 11) # set z to lower
slope <- terrain(elevation, opt = "slope", unit = "degrees")
slope_res <- raster::resample(slope, r3, method = "bilinear")
slope_res<-crop(slope_res, extent(mp))
slope_res<-mask(slope_res, mp)
# calculate habitat condition
habitat.v2 <-overlay(r3,
slope_res,
fun=Habitat02)
# plot habitat conditions
leaflet() %>% addTiles() %>%
addRasterImage(habitat.v2,
colors = pal, # use purple as defined previously
opacity = 0.6,
maxBytes = 10000000)
# check runtime for last portion
Sys.time() - t3
